{"version":3,"sources":["components/PriceComponent/PriceComponent.module.css","components/PriceComponent/PriceComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PriceComponent","className","styles","container","topInfo","style","color","fontWeight","fontSize","bottomContainer","bottomChild","leftChild","display","alignItems","marginBottom","marginTop","signUpButton","rightChild","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,UAAY,kCAAkC,gBAAkB,wCAAwC,QAAU,gCAAgC,YAAc,oCAAoC,UAAY,kCAAkC,WAAa,mCAAmC,aAAe,uC,gLC0DpTC,EAxDQ,WACnB,OACI,yBAAKC,UAAWC,IAAOC,WACnB,yBAAKF,UAAWC,IAAOE,SACnB,4BAAQC,MAAO,CAACC,MAAO,UAAWC,WAAY,MAAOC,SAAU,WAA/D,sBAGA,uBAAGH,MAAO,CAACC,MAAO,UAAWC,WAAY,MAAOC,SAAU,SAA1D,4CAGA,uBAAGH,MAAO,CAACC,MAAO,SAAlB,+EAEI,6BAFJ,0EAMJ,yBAAKL,UAAWC,IAAOO,iBACnB,yBAAKR,UAAS,UAAKC,IAAOQ,YAAZ,YAA2BR,IAAOS,YAC5C,4BAAQN,MAAO,CAACC,MAAO,OAAQC,WAAY,MAAOC,SAAU,WAA5D,wBAGA,uBAAGH,MAAO,CAACO,QAAS,OAAQC,WAAY,SAAUC,aAAc,IAC5D,0BAAMT,MAAO,CAACC,MAAO,OAAQC,WAAY,MAAOC,SAAU,WAA1D,OAGA,0BAAMH,MAAO,CAACC,MAAO,YAAaC,WAAY,MAAOC,SAAU,WAA/D,sBAIJ,uBAAGH,MAAO,CAACU,UAAW,EAAGT,MAAO,YAAaC,WAAY,MAAOC,SAAU,WAA1E,sCAGA,4BAAQP,UAAWC,IAAOc,cAA1B,YAIJ,yBAAKf,UAAS,UAAKC,IAAOQ,YAAZ,YAA2BR,IAAOe,aAC5C,4BAAQZ,MAAO,CAACC,MAAO,OAAQC,WAAY,MAAOC,SAAU,WAA5D,UAGA,uBAAGH,MAAO,CAACC,MAAO,YAAaC,WAAY,MAAOC,SAAU,WAA5D,iCACkC,6BADlC,+BAEgC,6BAFhC,oBAGqB,6BAHrB,0BAI2B,6BAJ3B,oBAKqB,6BALrB,mBAMoB,6BANpB,yBAO0B,kCCrC/BU,MATf,WACE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAW,aAAnB,+BACA,kBAAC,EAAD,QCIckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfa10dd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PriceComponent_container__2vP0l\",\"bottomContainer\":\"PriceComponent_bottomContainer__2Sp4x\",\"topInfo\":\"PriceComponent_topInfo__BUkvo\",\"bottomChild\":\"PriceComponent_bottomChild__33e_b\",\"leftChild\":\"PriceComponent_leftChild__GICbW\",\"rightChild\":\"PriceComponent_rightChild__2AWGx\",\"signUpButton\":\"PriceComponent_signUpButton__3-PcI\"};","import React from 'react';\r\nimport styles from './PriceComponent.module.css';\r\n\r\nconst PriceComponent = () => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.topInfo}>\r\n                <header style={{color: '#2bb3b1', fontWeight: '500', fontSize: '1.5rem'}}>\r\n                    Join our community\r\n                </header>\r\n                <p style={{color: '#bfdf32', fontWeight: '600', fontSize: '1rem'}}>\r\n                    30-day, hassle free money back guarentee\r\n                </p>\r\n                <p style={{color: '#888'}}>\r\n                    Gain access to our full library of tutorials along with expert code reviews.\r\n                    <br />\r\n                    Perfect for any developers who are serious about honing their skills.\r\n                </p>\r\n            </div>\r\n            <div className={styles.bottomContainer}>\r\n                <div className={`${styles.bottomChild} ${styles.leftChild}`}>\r\n                    <header style={{color: '#eee', fontWeight: '500', fontSize: '1.2rem'}}>\r\n                        Monthly Subscription\r\n                    </header>\r\n                    <p style={{display: 'flex', alignItems: 'center', marginBottom: 0}}>\r\n                        <span style={{color: '#eee', fontWeight: '500', fontSize: '1.6rem'}}>\r\n                            $29\r\n                        </span>\r\n                        <span style={{color: '#ffffff80', fontWeight: '500', fontSize: '0.9rem'}}>\r\n                            &nbsp;&nbsp;per month\r\n                        </span>\r\n                    </p>\r\n                    <p style={{marginTop: 0, color: '#ffffffcf', fontWeight: '500', fontSize: '0.9rem'}}>\r\n                        Full access for less than $1 a day\r\n                    </p>\r\n                    <button className={styles.signUpButton}>\r\n                        Sign Up\r\n                    </button>\r\n                </div>\r\n                <div className={`${styles.bottomChild} ${styles.rightChild}`}>\r\n                    <header style={{color: '#eee', fontWeight: '500', fontSize: '1.2rem'}}>\r\n                        Why us\r\n                    </header>\r\n                    <p style={{color: '#ffffff99', fontWeight: '400', fontSize: '0.9rem'}}>\r\n                        Tutorials by industry experts <br />\r\n                        Peer and expert code review <br />\r\n                        Coding exercises <br />\r\n                        Access to GitHub repos <br />\r\n                        Community forums <br />\r\n                        Flashcard decks <br />\r\n                        New videos every week <br />\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PriceComponent;","import React from 'react';\nimport './App.css';\nimport PriceComponent from './components/PriceComponent/PriceComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className={'mainTitle'}>Single price grid component</header>\n      <PriceComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}